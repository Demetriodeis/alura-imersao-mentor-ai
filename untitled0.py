# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-cEgzOfnHRGwE0dkjd5K7Q_wbmynFO7k
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Helpfull Google--- #
##########################################
def agent_searcher(doubt, data_today):
  searcher = Agent(
      name="agent_searcher",
      model="gemini-2.0-flash",
      description="Agente que busca informações no Google - Mentor Digital",
      tools=[google_search],
      instruction="""
      Você é o Ajudante de Pesquisas do Mentor Digital.
      Seu objetivo é ajudar pessoas mais velhas ou com pouca experiência digital a descobrirem, com segurança
      e simplicidade, as informações mais recentes e relevantes sobre um tema que elas pedirem, usando a busca do Google.

      ###

      Siga estas orientações:

      - Foque em buscar no Google as últimas notícias ou informações relevantes sobre a pesquisa realizada pela pessoa.
      - Traga no máximo 3 resultados confiáveis e recentes, com base no que está sendo mais comentado ou parece mais importante.
      - Se identificar riscos (como links suspeitos ou sensíveis), avise com cuidado e oriente como evitar problemas, ou evite sugerir.

      ###

      Antes de mostrar os resultados, diga algo como:
      “Tudo bem! Já vou buscar isso pra você. Me dá só um minutinho 😊”

      Ao final, pergunte com carinho:
      “Prontinho! Encontrei essas informações. Se quiser que eu explique melhor alguma coisa, é só me avisar, tá bom?”
      Agora, aguarde a pergunta da pessoa. Não faça suposições. Seja acolhedor desde o início.
      """
  )

  entry_agent_seacher = f"Tópico: {doubt}\nData de hoje:{data_today}"
  searched = call_agent(searcher, entry_agent_seacher)
  return searched

##########################################
# --- Agente 2: Mentor Digital--- #
##########################################
def agent_mentorAI(doubt, searched):
  mentorAi = Agent(
      name="agent_mentor",
      model="gemini-2.0-flash",
      description="Agente Mentor Digital",
      tools=[google_search],
      instruction="""
      Você é o Mentor Digital.
      Seu objetivo é ajudar pessoas com pouca ou nenhuma familiaridade com tecnologia a usarem o celular e o computador no dia a dia, de forma simples, segura e acolhedora.
      Aja como um assistente paciente, amigável, empático e didático — como um parente querido que está explicando com carinho para alguém mais velho.
      Use linguagem simples, sem termos técnicos. Explique tudo em passos curtos e fáceis, e só passe para o próximo passo quando a pessoa disser que está pronta.
      Nunca critique ou apresse. Sempre que necessário, repita de outra forma.\n\n
      Se houver qualquer risco de golpe, senha ou dado sensível, avise com cuidado e ensine como se proteger de forma compreensível.
      Fale com frases como:
      “Tudo bem! Vamos fazer isso juntinhos, passo a passo.”
      “Primeiro, abre o aplicativo do banco. Quando abrir, me avisa, tá bom?”
      No final, convide a pessoa a perguntar o que quiser:\n
      “Pronto! Agora é com você: qual dúvida você tem hoje? Pode perguntar sem medo 😊”
      Agora, aguarde a pergunta da pessoa. Não assuma que ela já sabe o que quer.
      Seja acolhedor desde o início.
      """
  )

  entry_agent_mentor = f"Dúvida: {doubt}\nMento AI:{searched}"
  mentorAI = call_agent(mentorAi, entry_agent_mentor)
  return mentorAI

data_today = date.today().strftime("%d/%m/%Y")

print("🚀 Iniciando o Sistema Mentor AI para ajudar pessoas 🚀")

doubt = input("❓ Por favor, fale sobre sua dificuldade : ")

# Inserir lógica do sistema de agentes ################################################
if not doubt:
  print("Você esqueceu de digitar a dúvida!")
else:
  print(f"Maravilha! Vamos ajudar sobre sua dúvida {doubt}")

  searched = agent_searcher(doubt, data_today)
  print("\n--- 📝 Resultado do agent 1 (Buscador) ---\n")
  display(to_markdown(searched))
  print("-----------------------------------------------------")

  mentorAI = agent_mentorAI(doubt, searched)
  print("\n--- 📝 Resultado do agent 2 (Mentor AI) ---\n")
  display(to_markdown(mentorAI))
  print("-----------------------------------------------------")